// <auto-generated />
using System;
using KLTN_Team83.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KLTN_Team83.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513083041_AddOrderDetailAndOrderHeaderToDb")]
    partial class AddOrderDetailAndOrderHeaderToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KLTN_Team83.Models.Blog", b =>
                {
                    b.Property<int>("id_Blog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_Blog"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id_TypeBlog")
                        .HasColumnType("int");

                    b.Property<DateTime>("ngayTao")
                        .HasColumnType("datetime2");

                    b.Property<string>("tilte")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("id_Blog");

                    b.HasIndex("id_TypeBlog");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            id_Blog = 1,
                            ImageUrl = "raucu.jpg",
                            content = "Rau củ quả tốt cho hệ tiêu hóa",
                            id_TypeBlog = 1,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Rau củ"
                        },
                        new
                        {
                            id_Blog = 2,
                            ImageUrl = "nuoc.jpg",
                            content = "Uống nước giúp cơ thể lưu thông máu tốt hơn",
                            id_TypeBlog = 1,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Uống nước"
                        },
                        new
                        {
                            id_Blog = 3,
                            ImageUrl = "boi.jpg",
                            content = "Bơi lội giúp phát triển chiều cao",
                            id_TypeBlog = 3,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Bơi lội"
                        },
                        new
                        {
                            id_Blog = 4,
                            ImageUrl = "ngu.jpg",
                            content = "Ngủ đủ giấc giúp cơ thể khỏe mạnh hon",
                            id_TypeBlog = 5,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Ngủ đủ giấc"
                        },
                        new
                        {
                            id_Blog = 5,
                            ImageUrl = "theduc.jpg",
                            content = "Tập thể dục giúp cơ thể khỏe mạnh hơn",
                            id_TypeBlog = 3,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Tập thể dục"
                        },
                        new
                        {
                            id_Blog = 6,
                            ImageUrl = "yoga.jpg",
                            content = "Tập Yoga giúp cơ thể dẻo dai hơn",
                            id_TypeBlog = 3,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Tập Yoga"
                        },
                        new
                        {
                            id_Blog = 7,
                            ImageUrl = "corona.jpg",
                            content = "Virut Corona làm suy giảm hệ miễn dịch",
                            id_TypeBlog = 2,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Corona"
                        },
                        new
                        {
                            id_Blog = 8,
                            ImageUrl = "tieu.jpg",
                            content = "Bệnh tiểu đường làm suy giảm hệ miễn dịch",
                            id_TypeBlog = 2,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Bệnh tiểu đường"
                        },
                        new
                        {
                            id_Blog = 9,
                            ImageUrl = "tim.jpg",
                            content = "Bệnh tim mạch làm suy giảm hệ miễn dịch",
                            id_TypeBlog = 2,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Bệnh tim mạch"
                        },
                        new
                        {
                            id_Blog = 10,
                            ImageUrl = "ungthu.jpg",
                            content = "Bệnh ung thư làm suy giảm hệ miễn dịch",
                            id_TypeBlog = 2,
                            ngayTao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            tilte = "Bệnh ung thư"
                        });
                });

            modelBuilder.Entity("KLTN_Team83.Models.Category", b =>
                {
                    b.Property<int>("Id_Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Category"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id_Category");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id_Category = 1,
                            DisplayOrder = 1,
                            Name = "Thức ăn"
                        },
                        new
                        {
                            Id_Category = 2,
                            DisplayOrder = 2,
                            Name = "Thức uống"
                        },
                        new
                        {
                            Id_Category = 3,
                            DisplayOrder = 3,
                            Name = "Thức ăn dinh dưỡng"
                        },
                        new
                        {
                            Id_Category = 4,
                            DisplayOrder = 4,
                            Name = "Thực phẩm hỗ trợ"
                        });
                });

            modelBuilder.Entity("KLTN_Team83.Models.Company", b =>
                {
                    b.Property<int>("Id_Company")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Company"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Company");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("KLTN_Team83.Models.Goal", b =>
                {
                    b.Property<int>("Id_Goal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Goal"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TargetValue")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Goal");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("KLTN_Team83.Models.Habit", b =>
                {
                    b.Property<int>("Id_Habit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Habit"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Habit");

                    b.ToTable("Habits");
                });

            modelBuilder.Entity("KLTN_Team83.Models.HabitEntry", b =>
                {
                    b.Property<int>("Id_HabitEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_HabitEntry"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HabitId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id_HabitEntry");

                    b.HasIndex("HabitId");

                    b.ToTable("HabitEntries");
                });

            modelBuilder.Entity("KLTN_Team83.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id_OD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_OD"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Id_OH")
                        .HasColumnType("int");

                    b.Property<int>("Id_Product")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id_OD");

                    b.HasIndex("Id_OH");

                    b.HasIndex("Id_Product");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("KLTN_Team83.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id_OH")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_OH"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("PaymentDueDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_OH");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("KLTN_Team83.Models.Product", b =>
                {
                    b.Property<int>("Id_Product")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Product"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Category")
                        .HasColumnType("int");

                    b.Property<string>("ImgageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NCC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.HasKey("Id_Product");

                    b.HasIndex("Id_Category");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id_Product = 1,
                            Description = "Thịt bò tươi ngon",
                            Id_Category = 1,
                            ImgageUrl = "",
                            NCC = "Đá Chẹt",
                            NameProduct = "Thịt bò",
                            Price = 20.0,
                            Price100 = 15.0,
                            Price50 = 18.0
                        },
                        new
                        {
                            Id_Product = 2,
                            Description = "Nước điện giải có ga bù nước",
                            Id_Category = 2,
                            ImgageUrl = "",
                            NCC = "Long Châu",
                            NameProduct = "Nước điện giải",
                            Price = 10.0,
                            Price100 = 5.0,
                            Price50 = 8.0
                        },
                        new
                        {
                            Id_Product = 3,
                            Description = "Kẹo có thuốc xổ",
                            Id_Category = 4,
                            ImgageUrl = "",
                            NCC = "Quang Linh",
                            NameProduct = "Kẹo rau Kera",
                            Price = 50.0,
                            Price100 = 43.0,
                            Price50 = 45.0
                        });
                });

            modelBuilder.Entity("KLTN_Team83.Models.ScheduleItem", b =>
                {
                    b.Property<int>("Id_Sche")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Sche"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Sche");

                    b.ToTable("ScheduleItems");
                });

            modelBuilder.Entity("KLTN_Team83.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Id_Product")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Id_Product");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("KLTN_Team83.Models.TypeBlog", b =>
                {
                    b.Property<int>("id_TypeBlog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_TypeBlog"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_TypeBlog");

                    b.ToTable("TypeBlogs");

                    b.HasData(
                        new
                        {
                            id_TypeBlog = 1,
                            Description = "Thông tin về thức ăn dinh dưỡng",
                            Name = "Food"
                        },
                        new
                        {
                            id_TypeBlog = 2,
                            Description = "Thông tin về sức khỏe",
                            Name = "Health"
                        },
                        new
                        {
                            id_TypeBlog = 3,
                            Description = "Thông tin về các bài tập",
                            Name = "Exercises"
                        },
                        new
                        {
                            id_TypeBlog = 4,
                            Description = "Thông tin về sức khỏe tinh thần",
                            Name = "Mental"
                        },
                        new
                        {
                            id_TypeBlog = 5,
                            Description = "Thông tin về giấc ngủ",
                            Name = "Sleep"
                        },
                        new
                        {
                            id_TypeBlog = 6,
                            Description = "Thông tin về chế độ ăn uống",
                            Name = "Diet"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KLTN_Team83.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthGoal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<int?>("Id_Company")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasIndex("Id_Company");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("KLTN_Team83.Models.Blog", b =>
                {
                    b.HasOne("KLTN_Team83.Models.TypeBlog", "TypeBlog")
                        .WithMany()
                        .HasForeignKey("id_TypeBlog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeBlog");
                });

            modelBuilder.Entity("KLTN_Team83.Models.Goal", b =>
                {
                    b.HasOne("KLTN_Team83.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("KLTN_Team83.Models.HabitEntry", b =>
                {
                    b.HasOne("KLTN_Team83.Models.Habit", "Habit")
                        .WithMany()
                        .HasForeignKey("HabitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habit");
                });

            modelBuilder.Entity("KLTN_Team83.Models.OrderDetail", b =>
                {
                    b.HasOne("KLTN_Team83.Models.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("Id_OH")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KLTN_Team83.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Id_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KLTN_Team83.Models.OrderHeader", b =>
                {
                    b.HasOne("KLTN_Team83.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("KLTN_Team83.Models.Product", b =>
                {
                    b.HasOne("KLTN_Team83.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Id_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KLTN_Team83.Models.ShoppingCart", b =>
                {
                    b.HasOne("KLTN_Team83.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KLTN_Team83.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Id_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KLTN_Team83.Models.ApplicationUser", b =>
                {
                    b.HasOne("KLTN_Team83.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("Id_Company");

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
